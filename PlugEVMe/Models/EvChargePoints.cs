using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace PlugEVMe.Models
{
    // <auto-generated />
    // https://app.quicktype.io/#l=cs&r=json2csharp
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using PlugEVMe.Models;
    //
    //    List<EvChargePoints> evChargePoints = EvChargePoints.FromJson(jsonString);
    //
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using PlugEVMe.Models;

    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //

    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using PlugEVMe.Models;
    //
    //    var evChargePoints = EvChargePoints.FromJson(jsonString);


    public partial class EvChargePoints
    {
        [JsonProperty("DataProvider", NullValueHandling = NullValueHandling.Ignore)]
        public DataProvider DataProvider { get; set; }

        [JsonProperty("OperatorInfo")]
        public OperatorInfo OperatorInfo { get; set; }

        [JsonProperty("UsageType")]
        public UsageType UsageType { get; set; }

        [JsonProperty("StatusType")]
        public StatusType StatusType { get; set; }

        [JsonProperty("SubmissionStatus", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionStatus SubmissionStatus { get; set; }

        [JsonProperty("UserComments")]
        public List<UserComment> UserComments { get; set; }

        [JsonProperty("PercentageSimilarity")]
        public object PercentageSimilarity { get; set; }

        [JsonProperty("MediaItems")]
        public List<MediaItem> MediaItems { get; set; }

        [JsonProperty("IsRecentlyVerified", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRecentlyVerified { get; set; }

        [JsonProperty("DateLastVerified")]
        public DateTimeOffset? DateLastVerified { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("UUID", NullValueHandling = NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        [JsonProperty("ParentChargePointID")]
        public object ParentChargePointId { get; set; }

        [JsonProperty("DataProviderID", NullValueHandling = NullValueHandling.Ignore)]
        public long? DataProviderId { get; set; }

        [JsonProperty("DataProvidersReference")]
        public string DataProvidersReference { get; set; }

        [JsonProperty("OperatorID")]
        public long? OperatorId { get; set; }

        [JsonProperty("OperatorsReference")]
        public string OperatorsReference { get; set; }

        [JsonProperty("UsageTypeID")]
        public long? UsageTypeId { get; set; }

        [JsonProperty("UsageCost")]
        public string UsageCost { get; set; }

        [JsonProperty("AddressInfo", NullValueHandling = NullValueHandling.Ignore)]
        public AddressInfo AddressInfo { get; set; }

        [JsonProperty("Connections", NullValueHandling = NullValueHandling.Ignore)]
        public List<Connection> Connections { get; set; }

        [JsonProperty("NumberOfPoints")]
        public long? NumberOfPoints { get; set; }

        [JsonProperty("GeneralComments")]
        public string GeneralComments { get; set; }

        [JsonProperty("DatePlanned")]
        public object DatePlanned { get; set; }

        [JsonProperty("DateLastConfirmed")]
        public DateTimeOffset? DateLastConfirmed { get; set; }

        [JsonProperty("StatusTypeID")]
        public long? StatusTypeId { get; set; }

        [JsonProperty("DateLastStatusUpdate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateLastStatusUpdate { get; set; }

        [JsonProperty("MetadataValues")]
        public List<MetadataValue> MetadataValues { get; set; }

        [JsonProperty("DataQualityLevel")]
        public long? DataQualityLevel { get; set; }

        [JsonProperty("DateCreated", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateCreated { get; set; }

        [JsonProperty("SubmissionStatusTypeID", NullValueHandling = NullValueHandling.Ignore)]
        public long? SubmissionStatusTypeId { get; set; }
    }

    public partial class AddressInfo
    {
        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("AddressLine1", NullValueHandling = NullValueHandling.Ignore)]
        public string AddressLine1 { get; set; }

        [JsonProperty("AddressLine2")]
        public string AddressLine2 { get; set; }

        [JsonProperty("Town")]
        public string Town { get; set; }

        [JsonProperty("StateOrProvince")]
        public string StateOrProvince { get; set; }

        [JsonProperty("Postcode")]
        public string Postcode { get; set; }

        [JsonProperty("CountryID", NullValueHandling = NullValueHandling.Ignore)]
        public long? CountryId { get; set; }

        [JsonProperty("Country", NullValueHandling = NullValueHandling.Ignore)]
        public Country Country { get; set; }

        [JsonProperty("Latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("Longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("ContactTelephone1")]
        public string ContactTelephone1 { get; set; }

        [JsonProperty("ContactTelephone2")]
        public string ContactTelephone2 { get; set; }

        [JsonProperty("ContactEmail")]
        public string ContactEmail { get; set; }

        [JsonProperty("AccessComments")]
        public string AccessComments { get; set; }

        [JsonProperty("RelatedURL")]
        public string RelatedUrl { get; set; }

        [JsonProperty("Distance")]
        public double? Distance { get; set; }

        [JsonProperty("DistanceUnit", NullValueHandling = NullValueHandling.Ignore)]
        public long? DistanceUnit { get; set; }
    }

    public partial class Country
    {
        [JsonProperty("ISOCode", NullValueHandling = NullValueHandling.Ignore)]
        public string IsoCode { get; set; }

        [JsonProperty("ContinentCode", NullValueHandling = NullValueHandling.Ignore)]
        public ContinentCode? ContinentCode { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
    }

    public partial class Connection
    {
        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("ConnectionTypeID", NullValueHandling = NullValueHandling.Ignore)]
        public long? ConnectionTypeId { get; set; }

        [JsonProperty("ConnectionType", NullValueHandling = NullValueHandling.Ignore)]
        public ConnectionType ConnectionType { get; set; }

        [JsonProperty("Reference")]
        public string Reference { get; set; }

        [JsonProperty("StatusTypeID")]
        public long? StatusTypeId { get; set; }

        [JsonProperty("StatusType")]
        public StatusType StatusType { get; set; }

        [JsonProperty("LevelID")]
        public long? LevelId { get; set; }

        [JsonProperty("Level")]
        public Level Level { get; set; }

        [JsonProperty("Amps")]
        public long? Amps { get; set; }

        [JsonProperty("Voltage")]
        public long? Voltage { get; set; }

        [JsonProperty("PowerKW")]
        public double? PowerKw { get; set; }

        [JsonProperty("CurrentTypeID")]
        public long? CurrentTypeId { get; set; }

        [JsonProperty("CurrentType")]
        public CurrentType CurrentType { get; set; }

        [JsonProperty("Quantity")]
        public long? Quantity { get; set; }

        [JsonProperty("Comments")]
        public object Comments { get; set; }
    }

    public partial class ConnectionType
    {
        [JsonProperty("FormalName")]
        public FormalName? FormalName { get; set; }

        [JsonProperty("IsDiscontinued")]
        public bool? IsDiscontinued { get; set; }

        [JsonProperty("IsObsolete")]
        public bool? IsObsolete { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public ConnectionTypeTitle? Title { get; set; }
    }

    public partial class CurrentType
    {
        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public Description? Description { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public CurrentTypeTitle? Title { get; set; }
    }

    public partial class Level
    {
        [JsonProperty("Comments", NullValueHandling = NullValueHandling.Ignore)]
        public Comments? Comments { get; set; }

        [JsonProperty("IsFastChargeCapable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsFastChargeCapable { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public LevelTitle? Title { get; set; }
    }

    public partial class StatusType
    {
        [JsonProperty("IsOperational")]
        public bool? IsOperational { get; set; }

        [JsonProperty("IsUserSelectable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsUserSelectable { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public StatusTypeTitle? Title { get; set; }
    }

    public partial class DataProvider
    {
        [JsonProperty("WebsiteURL", NullValueHandling = NullValueHandling.Ignore)]
        public Uri WebsiteUrl { get; set; }

        [JsonProperty("Comments")]
        public object Comments { get; set; }

        [JsonProperty("DataProviderStatusType", NullValueHandling = NullValueHandling.Ignore)]
        public DataProviderStatusType DataProviderStatusType { get; set; }

        [JsonProperty("IsRestrictedEdit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRestrictedEdit { get; set; }

        [JsonProperty("IsOpenDataLicensed")]
        public bool? IsOpenDataLicensed { get; set; }

        [JsonProperty("IsApprovedImport")]
        public bool? IsApprovedImport { get; set; }

        [JsonProperty("License")]
        public string License { get; set; }

        [JsonProperty("DateLastImported")]
        public DateTimeOffset? DateLastImported { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public DataProviderTitle? Title { get; set; }
    }

    public partial class DataProviderStatusType
    {
        [JsonProperty("IsProviderEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsProviderEnabled { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public DataProviderStatusTypeTitle? Title { get; set; }
    }

    public partial class MediaItem
    {
        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("ChargePointID", NullValueHandling = NullValueHandling.Ignore)]
        public long? ChargePointId { get; set; }

        [JsonProperty("ItemURL", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ItemUrl { get; set; }

        [JsonProperty("ItemThumbnailURL", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ItemThumbnailUrl { get; set; }

        [JsonProperty("Comment", NullValueHandling = NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [JsonProperty("IsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [JsonProperty("IsVideo", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVideo { get; set; }

        [JsonProperty("IsFeaturedItem", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsFeaturedItem { get; set; }

        [JsonProperty("IsExternalResource", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsExternalResource { get; set; }

        [JsonProperty("MetadataValue")]
        public object MetadataValue { get; set; }

        [JsonProperty("User", NullValueHandling = NullValueHandling.Ignore)]
        public User User { get; set; }

        [JsonProperty("DateCreated", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateCreated { get; set; }
    }

    public partial class User
    {
        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("IdentityProvider")]
        public object IdentityProvider { get; set; }

        [JsonProperty("Identifier")]
        public object Identifier { get; set; }

        [JsonProperty("CurrentSessionToken")]
        public object CurrentSessionToken { get; set; }

        [JsonProperty("Username", NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        [JsonProperty("Profile")]
        public object Profile { get; set; }

        [JsonProperty("Location")]
        public object Location { get; set; }

        [JsonProperty("WebsiteURL")]
        public object WebsiteUrl { get; set; }

        [JsonProperty("ReputationPoints", NullValueHandling = NullValueHandling.Ignore)]
        public long? ReputationPoints { get; set; }

        [JsonProperty("Permissions")]
        public object Permissions { get; set; }

        [JsonProperty("PermissionsRequested")]
        public object PermissionsRequested { get; set; }

        [JsonProperty("DateCreated")]
        public object DateCreated { get; set; }

        [JsonProperty("DateLastLogin")]
        public object DateLastLogin { get; set; }

        [JsonProperty("IsProfilePublic")]
        public object IsProfilePublic { get; set; }

        [JsonProperty("IsEmergencyChargingProvider")]
        public object IsEmergencyChargingProvider { get; set; }

        [JsonProperty("IsPublicChargingProvider")]
        public object IsPublicChargingProvider { get; set; }

        [JsonProperty("Latitude")]
        public object Latitude { get; set; }

        [JsonProperty("Longitude")]
        public object Longitude { get; set; }

        [JsonProperty("EmailAddress")]
        public object EmailAddress { get; set; }

        [JsonProperty("EmailHash")]
        public object EmailHash { get; set; }

        [JsonProperty("ProfileImageURL")]
        public Uri ProfileImageUrl { get; set; }

        [JsonProperty("IsCurrentSessionTokenValid")]
        public object IsCurrentSessionTokenValid { get; set; }

        [JsonProperty("APIKey")]
        public object ApiKey { get; set; }

        [JsonProperty("SyncedSettings")]
        public object SyncedSettings { get; set; }
    }

    public partial class MetadataValue
    {
        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("MetadataFieldID", NullValueHandling = NullValueHandling.Ignore)]
        public long? MetadataFieldId { get; set; }

        [JsonProperty("ItemValue", NullValueHandling = NullValueHandling.Ignore)]
        public string ItemValue { get; set; }

        [JsonProperty("MetadataFieldOption")]
        public object MetadataFieldOption { get; set; }

        [JsonProperty("MetadataFieldOptionID")]
        public object MetadataFieldOptionId { get; set; }
    }

    public partial class OperatorInfo
    {
        [JsonProperty("WebsiteURL")]
        public Uri WebsiteUrl { get; set; }

        [JsonProperty("Comments")]
        public string Comments { get; set; }

        [JsonProperty("PhonePrimaryContact")]
        public string PhonePrimaryContact { get; set; }

        [JsonProperty("PhoneSecondaryContact")]
        public PhoneSecondaryContactUnion? PhoneSecondaryContact { get; set; }

        [JsonProperty("IsPrivateIndividual")]
        public bool? IsPrivateIndividual { get; set; }

        [JsonProperty("AddressInfo")]
        public object AddressInfo { get; set; }

        [JsonProperty("BookingURL")]
        public Uri BookingUrl { get; set; }

        [JsonProperty("ContactEmail")]
        public string ContactEmail { get; set; }

        [JsonProperty("FaultReportEmail")]
        public FaultReportEmail? FaultReportEmail { get; set; }

        [JsonProperty("IsRestrictedEdit")]
        public bool? IsRestrictedEdit { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
    }

    public partial class SubmissionStatus
    {
        [JsonProperty("IsLive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLive { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionStatusTitle? Title { get; set; }
    }

    public partial class UsageType
    {
        [JsonProperty("IsPayAtLocation")]
        public bool? IsPayAtLocation { get; set; }

        [JsonProperty("IsMembershipRequired")]
        public bool? IsMembershipRequired { get; set; }

        [JsonProperty("IsAccessKeyRequired")]
        public bool? IsAccessKeyRequired { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public UsageTypeTitle? Title { get; set; }
    }

    public partial class UserComment
    {
        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("ChargePointID", NullValueHandling = NullValueHandling.Ignore)]
        public long? ChargePointId { get; set; }

        [JsonProperty("CommentTypeID", NullValueHandling = NullValueHandling.Ignore)]
        public long? CommentTypeId { get; set; }

        [JsonProperty("CommentType", NullValueHandling = NullValueHandling.Ignore)]
        public CommentType CommentType { get; set; }

        [JsonProperty("UserName", NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("Comment")]
        public string Comment { get; set; }

        [JsonProperty("Rating")]
        public long? Rating { get; set; }

        [JsonProperty("RelatedURL")]
        public Uri RelatedUrl { get; set; }

        [JsonProperty("DateCreated", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateCreated { get; set; }

        [JsonProperty("User")]
        public User User { get; set; }

        [JsonProperty("CheckinStatusTypeID")]
        public long? CheckinStatusTypeId { get; set; }

        [JsonProperty("CheckinStatusType")]
        public CheckinStatusType CheckinStatusType { get; set; }

        [JsonProperty("IsActionedByEditor")]
        public bool? IsActionedByEditor { get; set; }
    }

    public partial class CheckinStatusType
    {
        [JsonProperty("IsPositive")]
        public bool? IsPositive { get; set; }

        [JsonProperty("IsAutomatedCheckin", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsAutomatedCheckin { get; set; }

        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }
    }

    public partial class CommentType
    {
        [JsonProperty("ID", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
        public CommentTypeTitle? Title { get; set; }
    }

    public enum ContinentCode { As, Eu, Na };

    public enum FormalName { Bs1363TypeG, Iec621962, Iec621962Type2, Iec621962Type3, Iec621963ConfigurationAa, Iec621963ConfigurationEe, Iec621963ConfigurationFf, NotSpecified, SaeJ17722009, TeslaSupercharger };

    public enum ConnectionTypeTitle { Bs13633Pin13Amp, CcsType1, CcsType2, Cee5Pin, Cee75, ChAdeMo, Nema1450, Nema520R, Nema620, ScameType3ALowPower, ScameType3CSchneiderLegrand, TeslaModelSX, TeslaSupercharger, Type1J1772, Type2SocketOnly, Type2TetheredConnector, Unknown };

    public enum Description { AlternatingCurrentSinglePhase, AlternatingCurrentThreePhase, DirectCurrent };

    public enum CurrentTypeTitle { AcSinglePhase, AcThreePhase, Dc };

    public enum Comments { Over2KWUsuallyNonDomesticSocketType, The40KwAndHigher, Under2KWUsuallyDomesticSocketTypes };

    public enum LevelTitle { Level1LowUnder2KW, Level2MediumOver2KW, Level3HighOver40KW };

    public enum StatusTypeTitle { NotOperational, Operational, PartlyOperationalMixed, PlannedForFutureDate, TemporarilyUnavailable, Unknown };

    public enum DataProviderStatusTypeTitle { AutomatedImport, ManualDataEntry, NotCurrentlyUsedImported };

    public enum DataProviderTitle { AfdcEnergyGov, CarStationsCom, ChAdeMoCom, OpenChargeMapContributors, UkNationalChargePointRegistry };

    public enum FaultReportEmail { AdminChargeyourcarOrgUk, AssistanceKiwhipassFr, EnquiriesPodPointCom, FortheroadEcotricityCoUk, InfoElektromotiveCom, InfoSmartlabGmbhDe, InfoZerocarbonworldCom, MembershipSourcelondonNet, PolarenquiriesChargemasterplcCom, SavSodetrelFr, SupportBlinknetworkCom, SupportCoulombtechCom, TugiElmoEe };

    public enum PhoneSecondaryContactEnum { The02072474114, The82303030 };

    public enum SubmissionStatusTitle { ImportedAndPublished, SubmissionPublished };

    public enum UsageTypeTitle { PrivateForStaffVisitorsOrCustomers, PrivateRestrictedAccess, Public, PublicMembershipRequired, PublicNoticeRequired, PublicPayAtLocation, Unknown };

    public enum CommentTypeTitle { FaultReportNoticeToUsersAndOperator, GeneralComment, ImportantNoticeForOtherUsers, SuggestedChangeNoteToEditors };

    public partial struct PhoneSecondaryContactUnion
    {
        public PhoneSecondaryContactEnum? Enum;
        public long? Integer;

        public static implicit operator PhoneSecondaryContactUnion(PhoneSecondaryContactEnum Enum) => new PhoneSecondaryContactUnion { Enum = Enum };
        public static implicit operator PhoneSecondaryContactUnion(long Integer) => new PhoneSecondaryContactUnion { Integer = Integer };
        public bool IsNull => Integer == null && Enum == null;
    }

    public partial class EvChargePoints
    {
        public static List<EvChargePoints> FromJson(string json) => JsonConvert.DeserializeObject<List<EvChargePoints>>(json, PlugEVMe.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<EvChargePoints> self) => JsonConvert.SerializeObject(self, PlugEVMe.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ContinentCodeConverter.Singleton,
                FormalNameConverter.Singleton,
                ConnectionTypeTitleConverter.Singleton,
                DescriptionConverter.Singleton,
                CurrentTypeTitleConverter.Singleton,
                CommentsConverter.Singleton,
                LevelTitleConverter.Singleton,
                StatusTypeTitleConverter.Singleton,
                DataProviderStatusTypeTitleConverter.Singleton,
                DataProviderTitleConverter.Singleton,
                FaultReportEmailConverter.Singleton,
                PhoneSecondaryContactUnionConverter.Singleton,
                PhoneSecondaryContactEnumConverter.Singleton,
                SubmissionStatusTitleConverter.Singleton,
                UsageTypeTitleConverter.Singleton,
                CommentTypeTitleConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ContinentCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContinentCode) || t == typeof(ContinentCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AS":
                    return ContinentCode.As;
                case "EU":
                    return ContinentCode.Eu;
                case "NA":
                    return ContinentCode.Na;
            }
            throw new Exception("Cannot unmarshal type ContinentCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContinentCode)untypedValue;
            switch (value)
            {
                case ContinentCode.As:
                    serializer.Serialize(writer, "AS");
                    return;
                case ContinentCode.Eu:
                    serializer.Serialize(writer, "EU");
                    return;
                case ContinentCode.Na:
                    serializer.Serialize(writer, "NA");
                    return;
            }
            throw new Exception("Cannot marshal type ContinentCode");
        }

        public static readonly ContinentCodeConverter Singleton = new ContinentCodeConverter();
    }

    internal class FormalNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FormalName) || t == typeof(FormalName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BS1363 / Type G":
                    return FormalName.Bs1363TypeG;
                case "IEC 62196-2":
                    return FormalName.Iec621962;
                case "IEC 62196-2 Type 2":
                    return FormalName.Iec621962Type2;
                case "IEC 62196-2 Type 3":
                    return FormalName.Iec621962Type3;
                case "IEC 62196-3 Configuration AA":
                    return FormalName.Iec621963ConfigurationAa;
                case "IEC 62196-3 Configuration EE":
                    return FormalName.Iec621963ConfigurationEe;
                case "IEC 62196-3 Configuration FF":
                    return FormalName.Iec621963ConfigurationFf;
                case "Not Specified":
                    return FormalName.NotSpecified;
                case "SAE J1772-2009":
                    return FormalName.SaeJ17722009;
                case "Tesla Supercharger":
                    return FormalName.TeslaSupercharger;
            }
            throw new Exception("Cannot unmarshal type FormalName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FormalName)untypedValue;
            switch (value)
            {
                case FormalName.Bs1363TypeG:
                    serializer.Serialize(writer, "BS1363 / Type G");
                    return;
                case FormalName.Iec621962:
                    serializer.Serialize(writer, "IEC 62196-2");
                    return;
                case FormalName.Iec621962Type2:
                    serializer.Serialize(writer, "IEC 62196-2 Type 2");
                    return;
                case FormalName.Iec621962Type3:
                    serializer.Serialize(writer, "IEC 62196-2 Type 3");
                    return;
                case FormalName.Iec621963ConfigurationAa:
                    serializer.Serialize(writer, "IEC 62196-3 Configuration AA");
                    return;
                case FormalName.Iec621963ConfigurationEe:
                    serializer.Serialize(writer, "IEC 62196-3 Configuration EE");
                    return;
                case FormalName.Iec621963ConfigurationFf:
                    serializer.Serialize(writer, "IEC 62196-3 Configuration FF");
                    return;
                case FormalName.NotSpecified:
                    serializer.Serialize(writer, "Not Specified");
                    return;
                case FormalName.SaeJ17722009:
                    serializer.Serialize(writer, "SAE J1772-2009");
                    return;
                case FormalName.TeslaSupercharger:
                    serializer.Serialize(writer, "Tesla Supercharger");
                    return;
            }
            throw new Exception("Cannot marshal type FormalName");
        }

        public static readonly FormalNameConverter Singleton = new FormalNameConverter();
    }

    internal class ConnectionTypeTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConnectionTypeTitle) || t == typeof(ConnectionTypeTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BS1363 3 Pin 13 Amp":
                    return ConnectionTypeTitle.Bs13633Pin13Amp;
                case "CCS (Type 1)":
                    return ConnectionTypeTitle.CcsType1;
                case "CCS (Type 2)":
                    return ConnectionTypeTitle.CcsType2;
                case "CEE 5 Pin":
                    return ConnectionTypeTitle.Cee5Pin;
                case "CEE 7/5":
                    return ConnectionTypeTitle.Cee75;
                case "CHAdeMO":
                    return ConnectionTypeTitle.ChAdeMo;
                case "NEMA 14-50":
                    return ConnectionTypeTitle.Nema1450;
                case "NEMA 5-20R":
                    return ConnectionTypeTitle.Nema520R;
                case "NEMA 6-20":
                    return ConnectionTypeTitle.Nema620;
                case "SCAME Type 3A (Low Power)":
                    return ConnectionTypeTitle.ScameType3ALowPower;
                case "SCAME Type 3C (Schneider-Legrand)":
                    return ConnectionTypeTitle.ScameType3CSchneiderLegrand;
                case "Tesla (Model S/X)":
                    return ConnectionTypeTitle.TeslaModelSX;
                case "Tesla Supercharger":
                    return ConnectionTypeTitle.TeslaSupercharger;
                case "Type 1 (J1772)":
                    return ConnectionTypeTitle.Type1J1772;
                case "Type 2 (Socket Only)":
                    return ConnectionTypeTitle.Type2SocketOnly;
                case "Type 2 (Tethered Connector) ":
                    return ConnectionTypeTitle.Type2TetheredConnector;
                case "Unknown":
                    return ConnectionTypeTitle.Unknown;
            }
            throw new Exception("Cannot unmarshal type ConnectionTypeTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConnectionTypeTitle)untypedValue;
            switch (value)
            {
                case ConnectionTypeTitle.Bs13633Pin13Amp:
                    serializer.Serialize(writer, "BS1363 3 Pin 13 Amp");
                    return;
                case ConnectionTypeTitle.CcsType1:
                    serializer.Serialize(writer, "CCS (Type 1)");
                    return;
                case ConnectionTypeTitle.CcsType2:
                    serializer.Serialize(writer, "CCS (Type 2)");
                    return;
                case ConnectionTypeTitle.Cee5Pin:
                    serializer.Serialize(writer, "CEE 5 Pin");
                    return;
                case ConnectionTypeTitle.Cee75:
                    serializer.Serialize(writer, "CEE 7/5");
                    return;
                case ConnectionTypeTitle.ChAdeMo:
                    serializer.Serialize(writer, "CHAdeMO");
                    return;
                case ConnectionTypeTitle.Nema1450:
                    serializer.Serialize(writer, "NEMA 14-50");
                    return;
                case ConnectionTypeTitle.Nema520R:
                    serializer.Serialize(writer, "NEMA 5-20R");
                    return;
                case ConnectionTypeTitle.Nema620:
                    serializer.Serialize(writer, "NEMA 6-20");
                    return;
                case ConnectionTypeTitle.ScameType3ALowPower:
                    serializer.Serialize(writer, "SCAME Type 3A (Low Power)");
                    return;
                case ConnectionTypeTitle.ScameType3CSchneiderLegrand:
                    serializer.Serialize(writer, "SCAME Type 3C (Schneider-Legrand)");
                    return;
                case ConnectionTypeTitle.TeslaModelSX:
                    serializer.Serialize(writer, "Tesla (Model S/X)");
                    return;
                case ConnectionTypeTitle.TeslaSupercharger:
                    serializer.Serialize(writer, "Tesla Supercharger");
                    return;
                case ConnectionTypeTitle.Type1J1772:
                    serializer.Serialize(writer, "Type 1 (J1772)");
                    return;
                case ConnectionTypeTitle.Type2SocketOnly:
                    serializer.Serialize(writer, "Type 2 (Socket Only)");
                    return;
                case ConnectionTypeTitle.Type2TetheredConnector:
                    serializer.Serialize(writer, "Type 2 (Tethered Connector) ");
                    return;
                case ConnectionTypeTitle.Unknown:
                    serializer.Serialize(writer, "Unknown");
                    return;
            }
            throw new Exception("Cannot marshal type ConnectionTypeTitle");
        }

        public static readonly ConnectionTypeTitleConverter Singleton = new ConnectionTypeTitleConverter();
    }

    internal class DescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Description) || t == typeof(Description?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Alternating Current - Single Phase":
                    return Description.AlternatingCurrentSinglePhase;
                case "Alternating Current - Three Phase":
                    return Description.AlternatingCurrentThreePhase;
                case "Direct Current":
                    return Description.DirectCurrent;
            }
            throw new Exception("Cannot unmarshal type Description");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Description)untypedValue;
            switch (value)
            {
                case Description.AlternatingCurrentSinglePhase:
                    serializer.Serialize(writer, "Alternating Current - Single Phase");
                    return;
                case Description.AlternatingCurrentThreePhase:
                    serializer.Serialize(writer, "Alternating Current - Three Phase");
                    return;
                case Description.DirectCurrent:
                    serializer.Serialize(writer, "Direct Current");
                    return;
            }
            throw new Exception("Cannot marshal type Description");
        }

        public static readonly DescriptionConverter Singleton = new DescriptionConverter();
    }

    internal class CurrentTypeTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CurrentTypeTitle) || t == typeof(CurrentTypeTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AC (Single-Phase)":
                    return CurrentTypeTitle.AcSinglePhase;
                case "AC (Three-Phase)":
                    return CurrentTypeTitle.AcThreePhase;
                case "DC":
                    return CurrentTypeTitle.Dc;
            }
            throw new Exception("Cannot unmarshal type CurrentTypeTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CurrentTypeTitle)untypedValue;
            switch (value)
            {
                case CurrentTypeTitle.AcSinglePhase:
                    serializer.Serialize(writer, "AC (Single-Phase)");
                    return;
                case CurrentTypeTitle.AcThreePhase:
                    serializer.Serialize(writer, "AC (Three-Phase)");
                    return;
                case CurrentTypeTitle.Dc:
                    serializer.Serialize(writer, "DC");
                    return;
            }
            throw new Exception("Cannot marshal type CurrentTypeTitle");
        }

        public static readonly CurrentTypeTitleConverter Singleton = new CurrentTypeTitleConverter();
    }

    internal class CommentsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Comments) || t == typeof(Comments?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "40KW and Higher":
                    return Comments.The40KwAndHigher;
                case "Over 2 kW, usually non-domestic socket type":
                    return Comments.Over2KWUsuallyNonDomesticSocketType;
                case "Under 2 kW, usually domestic socket types":
                    return Comments.Under2KWUsuallyDomesticSocketTypes;
            }
            throw new Exception("Cannot unmarshal type Comments");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Comments)untypedValue;
            switch (value)
            {
                case Comments.The40KwAndHigher:
                    serializer.Serialize(writer, "40KW and Higher");
                    return;
                case Comments.Over2KWUsuallyNonDomesticSocketType:
                    serializer.Serialize(writer, "Over 2 kW, usually non-domestic socket type");
                    return;
                case Comments.Under2KWUsuallyDomesticSocketTypes:
                    serializer.Serialize(writer, "Under 2 kW, usually domestic socket types");
                    return;
            }
            throw new Exception("Cannot marshal type Comments");
        }

        public static readonly CommentsConverter Singleton = new CommentsConverter();
    }

    internal class LevelTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LevelTitle) || t == typeof(LevelTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Level 1 : Low (Under 2kW)":
                    return LevelTitle.Level1LowUnder2KW;
                case "Level 2 : Medium (Over 2kW)":
                    return LevelTitle.Level2MediumOver2KW;
                case "Level 3:  High (Over 40kW)":
                    return LevelTitle.Level3HighOver40KW;
            }
            throw new Exception("Cannot unmarshal type LevelTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LevelTitle)untypedValue;
            switch (value)
            {
                case LevelTitle.Level1LowUnder2KW:
                    serializer.Serialize(writer, "Level 1 : Low (Under 2kW)");
                    return;
                case LevelTitle.Level2MediumOver2KW:
                    serializer.Serialize(writer, "Level 2 : Medium (Over 2kW)");
                    return;
                case LevelTitle.Level3HighOver40KW:
                    serializer.Serialize(writer, "Level 3:  High (Over 40kW)");
                    return;
            }
            throw new Exception("Cannot marshal type LevelTitle");
        }

        public static readonly LevelTitleConverter Singleton = new LevelTitleConverter();
    }

    internal class StatusTypeTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StatusTypeTitle) || t == typeof(StatusTypeTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Not Operational":
                    return StatusTypeTitle.NotOperational;
                case "Operational":
                    return StatusTypeTitle.Operational;
                case "Partly Operational (Mixed)":
                    return StatusTypeTitle.PartlyOperationalMixed;
                case "Planned For Future Date":
                    return StatusTypeTitle.PlannedForFutureDate;
                case "Temporarily Unavailable":
                    return StatusTypeTitle.TemporarilyUnavailable;
                case "Unknown":
                    return StatusTypeTitle.Unknown;
            }
            throw new Exception("Cannot unmarshal type StatusTypeTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StatusTypeTitle)untypedValue;
            switch (value)
            {
                case StatusTypeTitle.NotOperational:
                    serializer.Serialize(writer, "Not Operational");
                    return;
                case StatusTypeTitle.Operational:
                    serializer.Serialize(writer, "Operational");
                    return;
                case StatusTypeTitle.PartlyOperationalMixed:
                    serializer.Serialize(writer, "Partly Operational (Mixed)");
                    return;
                case StatusTypeTitle.PlannedForFutureDate:
                    serializer.Serialize(writer, "Planned For Future Date");
                    return;
                case StatusTypeTitle.TemporarilyUnavailable:
                    serializer.Serialize(writer, "Temporarily Unavailable");
                    return;
                case StatusTypeTitle.Unknown:
                    serializer.Serialize(writer, "Unknown");
                    return;
            }
            throw new Exception("Cannot marshal type StatusTypeTitle");
        }

        public static readonly StatusTypeTitleConverter Singleton = new StatusTypeTitleConverter();
    }

    internal class DataProviderStatusTypeTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataProviderStatusTypeTitle) || t == typeof(DataProviderStatusTypeTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Automated Import":
                    return DataProviderStatusTypeTitle.AutomatedImport;
                case "Manual Data Entry":
                    return DataProviderStatusTypeTitle.ManualDataEntry;
                case "Not Currently Used/Imported":
                    return DataProviderStatusTypeTitle.NotCurrentlyUsedImported;
            }
            throw new Exception("Cannot unmarshal type DataProviderStatusTypeTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataProviderStatusTypeTitle)untypedValue;
            switch (value)
            {
                case DataProviderStatusTypeTitle.AutomatedImport:
                    serializer.Serialize(writer, "Automated Import");
                    return;
                case DataProviderStatusTypeTitle.ManualDataEntry:
                    serializer.Serialize(writer, "Manual Data Entry");
                    return;
                case DataProviderStatusTypeTitle.NotCurrentlyUsedImported:
                    serializer.Serialize(writer, "Not Currently Used/Imported");
                    return;
            }
            throw new Exception("Cannot marshal type DataProviderStatusTypeTitle");
        }

        public static readonly DataProviderStatusTypeTitleConverter Singleton = new DataProviderStatusTypeTitleConverter();
    }

    internal class DataProviderTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DataProviderTitle) || t == typeof(DataProviderTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CHAdeMO.com":
                    return DataProviderTitle.ChAdeMoCom;
                case "CarStations.com":
                    return DataProviderTitle.CarStationsCom;
                case "Open Charge Map Contributors":
                    return DataProviderTitle.OpenChargeMapContributors;
                case "UK National Charge Point Registry":
                    return DataProviderTitle.UkNationalChargePointRegistry;
                case "afdc.energy.gov":
                    return DataProviderTitle.AfdcEnergyGov;
            }
            throw new Exception("Cannot unmarshal type DataProviderTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DataProviderTitle)untypedValue;
            switch (value)
            {
                case DataProviderTitle.ChAdeMoCom:
                    serializer.Serialize(writer, "CHAdeMO.com");
                    return;
                case DataProviderTitle.CarStationsCom:
                    serializer.Serialize(writer, "CarStations.com");
                    return;
                case DataProviderTitle.OpenChargeMapContributors:
                    serializer.Serialize(writer, "Open Charge Map Contributors");
                    return;
                case DataProviderTitle.UkNationalChargePointRegistry:
                    serializer.Serialize(writer, "UK National Charge Point Registry");
                    return;
                case DataProviderTitle.AfdcEnergyGov:
                    serializer.Serialize(writer, "afdc.energy.gov");
                    return;
            }
            throw new Exception("Cannot marshal type DataProviderTitle");
        }

        public static readonly DataProviderTitleConverter Singleton = new DataProviderTitleConverter();
    }

    internal class FaultReportEmailConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FaultReportEmail) || t == typeof(FaultReportEmail?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "admin@chargeyourcar.org.uk":
                    return FaultReportEmail.AdminChargeyourcarOrgUk;
                case "assistance@kiwhipass.fr":
                    return FaultReportEmail.AssistanceKiwhipassFr;
                case "enquiries@pod-point.com":
                    return FaultReportEmail.EnquiriesPodPointCom;
                case "fortheroad@ecotricity.co.uk":
                    return FaultReportEmail.FortheroadEcotricityCoUk;
                case "info@elektromotive.com":
                    return FaultReportEmail.InfoElektromotiveCom;
                case "info@smartlab-gmbh.de":
                    return FaultReportEmail.InfoSmartlabGmbhDe;
                case "info@zerocarbonworld.com":
                    return FaultReportEmail.InfoZerocarbonworldCom;
                case "membership@sourcelondon.net":
                    return FaultReportEmail.MembershipSourcelondonNet;
                case "polarenquiries@chargemasterplc.com":
                    return FaultReportEmail.PolarenquiriesChargemasterplcCom;
                case "sav@sodetrel.fr":
                    return FaultReportEmail.SavSodetrelFr;
                case "support@blinknetwork.com":
                    return FaultReportEmail.SupportBlinknetworkCom;
                case "support@coulombtech.com":
                    return FaultReportEmail.SupportCoulombtechCom;
                case "tugi@elmo.ee":
                    return FaultReportEmail.TugiElmoEe;
            }
            throw new Exception("Cannot unmarshal type FaultReportEmail");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FaultReportEmail)untypedValue;
            switch (value)
            {
                case FaultReportEmail.AdminChargeyourcarOrgUk:
                    serializer.Serialize(writer, "admin@chargeyourcar.org.uk");
                    return;
                case FaultReportEmail.AssistanceKiwhipassFr:
                    serializer.Serialize(writer, "assistance@kiwhipass.fr");
                    return;
                case FaultReportEmail.EnquiriesPodPointCom:
                    serializer.Serialize(writer, "enquiries@pod-point.com");
                    return;
                case FaultReportEmail.FortheroadEcotricityCoUk:
                    serializer.Serialize(writer, "fortheroad@ecotricity.co.uk");
                    return;
                case FaultReportEmail.InfoElektromotiveCom:
                    serializer.Serialize(writer, "info@elektromotive.com");
                    return;
                case FaultReportEmail.InfoSmartlabGmbhDe:
                    serializer.Serialize(writer, "info@smartlab-gmbh.de");
                    return;
                case FaultReportEmail.InfoZerocarbonworldCom:
                    serializer.Serialize(writer, "info@zerocarbonworld.com");
                    return;
                case FaultReportEmail.MembershipSourcelondonNet:
                    serializer.Serialize(writer, "membership@sourcelondon.net");
                    return;
                case FaultReportEmail.PolarenquiriesChargemasterplcCom:
                    serializer.Serialize(writer, "polarenquiries@chargemasterplc.com");
                    return;
                case FaultReportEmail.SavSodetrelFr:
                    serializer.Serialize(writer, "sav@sodetrel.fr");
                    return;
                case FaultReportEmail.SupportBlinknetworkCom:
                    serializer.Serialize(writer, "support@blinknetwork.com");
                    return;
                case FaultReportEmail.SupportCoulombtechCom:
                    serializer.Serialize(writer, "support@coulombtech.com");
                    return;
                case FaultReportEmail.TugiElmoEe:
                    serializer.Serialize(writer, "tugi@elmo.ee");
                    return;
            }
            throw new Exception("Cannot marshal type FaultReportEmail");
        }

        public static readonly FaultReportEmailConverter Singleton = new FaultReportEmailConverter();
    }

    internal class PhoneSecondaryContactUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PhoneSecondaryContactUnion) || t == typeof(PhoneSecondaryContactUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new PhoneSecondaryContactUnion { };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "020 7247 4114":
                            return new PhoneSecondaryContactUnion { Enum = PhoneSecondaryContactEnum.The02072474114 };
                        case "8230 3030":
                            return new PhoneSecondaryContactUnion { Enum = PhoneSecondaryContactEnum.The82303030 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new PhoneSecondaryContactUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type PhoneSecondaryContactUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (PhoneSecondaryContactUnion)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case PhoneSecondaryContactEnum.The02072474114:
                        serializer.Serialize(writer, "020 7247 4114");
                        return;
                    case PhoneSecondaryContactEnum.The82303030:
                        serializer.Serialize(writer, "8230 3030");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type PhoneSecondaryContactUnion");
        }

        public static readonly PhoneSecondaryContactUnionConverter Singleton = new PhoneSecondaryContactUnionConverter();
    }

    internal class PhoneSecondaryContactEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PhoneSecondaryContactEnum) || t == typeof(PhoneSecondaryContactEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "020 7247 4114":
                    return PhoneSecondaryContactEnum.The02072474114;
                case "8230 3030":
                    return PhoneSecondaryContactEnum.The82303030;
            }
            throw new Exception("Cannot unmarshal type PhoneSecondaryContactEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PhoneSecondaryContactEnum)untypedValue;
            switch (value)
            {
                case PhoneSecondaryContactEnum.The02072474114:
                    serializer.Serialize(writer, "020 7247 4114");
                    return;
                case PhoneSecondaryContactEnum.The82303030:
                    serializer.Serialize(writer, "8230 3030");
                    return;
            }
            throw new Exception("Cannot marshal type PhoneSecondaryContactEnum");
        }

        public static readonly PhoneSecondaryContactEnumConverter Singleton = new PhoneSecondaryContactEnumConverter();
    }

    internal class SubmissionStatusTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubmissionStatusTitle) || t == typeof(SubmissionStatusTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Imported and Published":
                    return SubmissionStatusTitle.ImportedAndPublished;
                case "Submission Published":
                    return SubmissionStatusTitle.SubmissionPublished;
            }
            throw new Exception("Cannot unmarshal type SubmissionStatusTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SubmissionStatusTitle)untypedValue;
            switch (value)
            {
                case SubmissionStatusTitle.ImportedAndPublished:
                    serializer.Serialize(writer, "Imported and Published");
                    return;
                case SubmissionStatusTitle.SubmissionPublished:
                    serializer.Serialize(writer, "Submission Published");
                    return;
            }
            throw new Exception("Cannot marshal type SubmissionStatusTitle");
        }

        public static readonly SubmissionStatusTitleConverter Singleton = new SubmissionStatusTitleConverter();
    }

    internal class UsageTypeTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(UsageTypeTitle) || t == typeof(UsageTypeTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "(Unknown)":
                    return UsageTypeTitle.Unknown;
                case "Private - For Staff, Visitors or Customers":
                    return UsageTypeTitle.PrivateForStaffVisitorsOrCustomers;
                case "Private - Restricted Access":
                    return UsageTypeTitle.PrivateRestrictedAccess;
                case "Public":
                    return UsageTypeTitle.Public;
                case "Public - Membership Required":
                    return UsageTypeTitle.PublicMembershipRequired;
                case "Public - Notice Required":
                    return UsageTypeTitle.PublicNoticeRequired;
                case "Public - Pay At Location":
                    return UsageTypeTitle.PublicPayAtLocation;
            }
            throw new Exception("Cannot unmarshal type UsageTypeTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (UsageTypeTitle)untypedValue;
            switch (value)
            {
                case UsageTypeTitle.Unknown:
                    serializer.Serialize(writer, "(Unknown)");
                    return;
                case UsageTypeTitle.PrivateForStaffVisitorsOrCustomers:
                    serializer.Serialize(writer, "Private - For Staff, Visitors or Customers");
                    return;
                case UsageTypeTitle.PrivateRestrictedAccess:
                    serializer.Serialize(writer, "Private - Restricted Access");
                    return;
                case UsageTypeTitle.Public:
                    serializer.Serialize(writer, "Public");
                    return;
                case UsageTypeTitle.PublicMembershipRequired:
                    serializer.Serialize(writer, "Public - Membership Required");
                    return;
                case UsageTypeTitle.PublicNoticeRequired:
                    serializer.Serialize(writer, "Public - Notice Required");
                    return;
                case UsageTypeTitle.PublicPayAtLocation:
                    serializer.Serialize(writer, "Public - Pay At Location");
                    return;
            }
            throw new Exception("Cannot marshal type UsageTypeTitle");
        }

        public static readonly UsageTypeTitleConverter Singleton = new UsageTypeTitleConverter();
    }

    internal class CommentTypeTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CommentTypeTitle) || t == typeof(CommentTypeTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Fault Report (Notice To Users And Operator)":
                    return CommentTypeTitle.FaultReportNoticeToUsersAndOperator;
                case "General Comment":
                    return CommentTypeTitle.GeneralComment;
                case "Important Notice (For Other Users)":
                    return CommentTypeTitle.ImportantNoticeForOtherUsers;
                case "Suggested Change (Note To Editors)":
                    return CommentTypeTitle.SuggestedChangeNoteToEditors;
            }
            throw new Exception("Cannot unmarshal type CommentTypeTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CommentTypeTitle)untypedValue;
            switch (value)
            {
                case CommentTypeTitle.FaultReportNoticeToUsersAndOperator:
                    serializer.Serialize(writer, "Fault Report (Notice To Users And Operator)");
                    return;
                case CommentTypeTitle.GeneralComment:
                    serializer.Serialize(writer, "General Comment");
                    return;
                case CommentTypeTitle.ImportantNoticeForOtherUsers:
                    serializer.Serialize(writer, "Important Notice (For Other Users)");
                    return;
                case CommentTypeTitle.SuggestedChangeNoteToEditors:
                    serializer.Serialize(writer, "Suggested Change (Note To Editors)");
                    return;
            }
            throw new Exception("Cannot marshal type CommentTypeTitle");
        }

        public static readonly CommentTypeTitleConverter Singleton = new CommentTypeTitleConverter();
    }
}
